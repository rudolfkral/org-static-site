#+TITLE: How to publish a website
#+DATE: [2020-03-27 Fri 16:17]

* Publishing a page
=org-static-site= is designed to be simple.  There are no
templates[fn:2].  There are no complex rules for different folders or
obscure naming conventions.  Just put =.org= files in a =post/=
directory, run =org-static-site-publish=, and posts will be converted
to =.html= in a =publish/= directory[fn:1].

A website has a root directory which contains a =post/= and =publish/=
directory.  The =publish/= directory in turn contains a =static/=
directory.  These are all variables, so change them if you want.

#+begin_example
<root>/
  post/
    <file-name-sans-extension>.org
    index.org
    about.org
  publish/
    index.html
    about.html
    <file-name-sans-extension>.html
    static/
      style.css
      about.jpg
      favicon.png
#+end_example

=org-static-site.el= only cares about =post/= and =publish/=.  A post
file is an =.org= file living in =post/=.  A publish file lives in
=publish/= and is an =.html= file which was created from a post file.
=org-static-site.el= only looks for files in =post/=.  Only files in
the =post/= directory will be converted.  You decide what to do with
the publishable files located in =publish/=.  Draft files may
therefore be kept at the root level (or wherever else isn't the
=post/= directory).  =org-static-site= requires an =index.org= and an
=about.org=.

Posts are dated, but not on the index page.  The date really only
controls the order of the index.  Post file names are read from disk
system using =directory-files= which uses =string-lessp= to sort.
Otherwise, dates appear at the end of a post.

* Changing page layout
=org-static-site= works by rendering post files into strings and
concatenating them with the HTML that makes up a webpage.  If you want
a page to look different, change the source code.  See
=org-static-site-publish-page=.

#+begin_src elisp
(defun org-static-site-publish-page (page-path type)
  "Render PAGE-PATH as TYPE and publish as html file.

TYPE is a symbol indicating the type of page to render: 'index,
'post, or 'about.  Results are output to
`org-static-site-publish-directory'.

The rendered content is inserted into a generic html page
structure:

+--<head>-------------------------+
| `org-static-site-static-head'   |
| `org-static-site-variable-head' |
+--<body>-------------------------+
| `org-static-site-body-preamble' | ----->  <html>
|  rendered-content               |
| `org-static-site-body-postamble'|
+---------------------------------+

A page consists of two parts, <head> and <body>.  The <head> is
made of the `org-static-site-static-head' and
`org-static-site-variable-head'; the <body> of a
`org-static-site-body-preamble', the rendered content, and
`org-static-site-body-postamble'.

Content is rendered using one of `org-static-site-post-content',
`org-static-site-index-content', or
`org-static-site-about-content' depending on TYPE."
  (let ((outfile
	  (org-static-site-relative-path page-path org-static-site-publish-directory "\.html"))
	(body-content
	 (cond ((eq type 'post)
		(org-static-site-post-content page-path))
	       ((eq type 'index)
		(org-static-site-index-content page-path))
		((eq type 'about)
		 (org-static-site-about-content page-path
				    org-static-site-about-pic
				    org-static-site-about-pic-alt)))))
    (when body-content
      (with-temp-file outfile
	(insert (concat
		 "<!DOCTYPE html5>\n"
		 "<html lang=\"en\">\n"
		 "   <head>\n"
		 (org-static-site-static-head)
		 (org-static-site-variable-head page-path)
		 "   </head>\n"
		 "   <body>\n"
		 (org-static-site-body-preamble)
		 body-content
		 (org-static-site-body-postamble)
		 "   </body>\n"
		 "</html>")))
      ;; alert user
      (message "Wrote %s" outfile))))
#+end_src

If you change the source code, remember to re-evaluate the project!

You may want to use this to reset the =defcustom=:

#+begin_src elisp
(defmacro redefcustom (symbol newval &optional doc)
  "Reset the value of a symbol which was created using `defcustom'.
This function is intended only for development purposes.  Simply
replace `defcustom' with `redefcustom' and SYMBOL will be assigned
NEWVAL.  DOC will be ignored."
  `(setq ,symbol ,newval))
#+end_src

* Syntax highlighting
Syntax highlighting is controlled by =htmlize=.  This is included with
Org mode.  =htmlize= is implemented so that syntax highlighting colors
are gleaned from your current theme.  It's annoying to do, but it's
simplest to change your theme before publishing.  The theme used here
is [[https://emacsthemes.com/themes/base16-tomorrow-theme.html][base16-tomorrow]].

* Footnotes

[fn:1] I think this is a good definition for "simple".  The post files
have to come from /somewhere/.  Aside from asking for the files, or
putting all the posts in a [[https://endlessparentheses.com/how-i-blog-one-year-of-posts-in-a-single-org-file.html][single file]], I think this is the simplest.
You could develop [[https://github.com/novoid/lazyblorg#why-lazyblorg][an entire system to find files for you]].

[fn:2] For [[https://juanjose.garciaripoll.com/blog/org-mode-html-templates/index.html][an HTML template system for org-mode]], Juan José García
Ripoll explains how to do that.
